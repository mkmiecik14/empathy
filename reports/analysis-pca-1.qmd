---
title: "Analysis PCA 1"
author: "Matthew J. Kmiecik"
date: last-modified
date-format: "[Last modified:] DD MMM YYYY"
format:
  pdf:
    toc: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: false
  warning: false
  error: false
  working-directory: project
---

```{r, setup}
# libraries ----
library(tidyverse)

# data ----
render <- FALSE # set to false when rendering
if (render) {
  f <- here::here("output", "analysis-pca-1-exp-res.rds")
  exp_res <- read_rds(file = f)

  f <- here::here("output", "analysis-pca-1-q-res.rds")
  q_res <- read_rds(file = f)
  
  f <- here::here("output", "pca-data.rds")
  pca_data <- read_rds(file = f)
}

# when rendering quarto:
exp_res <- read_rds(file = "../../output/analysis-pca-1-exp-res.rds")
q_res <- read_rds(file = "../../output/analysis-pca-1-q-res.rds")
pca_data <- read_rds(file = "../../output/pca-data.rds")

# plot elements ----
library(RColorBrewer); library(ghibli); library(RColorBrewer); library(ggrepel)
rdgy <- brewer.pal(11, "RdGy")
```

## Brief Summary

This document plots and interprets the results from the principal component analysis (PCA) in `src/analysis/analysis-pca-1.R`.

Two PCAs were performed:

1. Only experimental pain/urgency measures were used; questionnaires were supplementary projected
2. All measures were included (experimental + questionnaires)

A few notes:

* Bootstrapping (importance of measures) and permutation testing (of components) were performed using 2,000 iterations
* Sample size for the first PCA was n=`nrow(exp_res$pca_res$Fixed.Data$ExPosition.Data$fi)`
* Sample size for the second PCA was n=`nrow(q_res$Fixed.Data$ExPosition.Data$fi)`


## Experimental Measures PCA

### Scree plot

```{r}
# scree data
scree_data <- 
  tibble(
    eigs = exp_res$pca_res$Fixed.Data$ExPosition.Data$eigs, 
    perc = exp_res$pca_res$Fixed.Data$ExPosition.Data$t,
    p = exp_res$pca_res$Inference.Data$components$p.vals
    ) %>%
  mutate(comp = factor(1:nrow(.)), sig = p<.05)

# scree plot
tcol <- c("TRUE" = rdgy[3], "FALSE" = rdgy[9])
ggplot(scree_data, aes(comp, perc)) +
  geom_path(aes(group = 1), alpha = 1/3) +
  geom_point(aes(color = sig), size = 2) +
  labs(
    x = "Component", 
    y = "Percentage of Variance Explained", 
    title = "Scree Plot"
    ) +
  scale_y_continuous(breaks = seq(1, 16, 2), labels = function(x) paste0(x, "%")) +
  scale_color_manual(values = tcol) +
  coord_cartesian(ylim = c(1, 16)) +
  theme_classic()
```

### Bootstrap ratios

```{r, fig.height=5}
# critical value used to test bootstrap significance
crit_val <- exp_res$pca_res$Inference.Data$fj.boots$tests$critical.value

# extracts bootstrap ratios
bsrs <- 
  exp_res$pca_res$Inference.Data$fj.boots$tests$boot.ratios %>%
  as_tibble(rownames = "meas")

# to long format for plotting
bsrs_long <- 
  bsrs %>% 
  pivot_longer(cols = -meas) %>%
  mutate(sig = abs(value) > crit_val, name = gsub("V", "PC", name)) 

plot_bsrs <- function(data, pc = 1, ...){
  tcol <- c("TRUE" = rdgy[3], "FALSE" = rdgy[8])
  this_pc <- paste0("PC", pc)
  pdata <- data %>% filter(name == this_pc)
  p <-
    ggplot(pdata, aes(value, reorder(meas, value), fill = sig)) +
    geom_bar(stat = "identity") +
    geom_vline(xintercept = c(-crit_val, crit_val), linetype = 2, color = rdgy[10]) +
    geom_vline(xintercept = 0, linetype = 1, color = "black") +
    scale_fill_manual(values = tcol) +
    labs(x = "Bootstrap Ratio (t)", y = "Measures", title = this_pc) +
    theme_bw() +
    theme(legend.position = "bottom")
  return(p)
}

# plots first 6 components
for (i in 1:6) {
  print(plot_bsrs(data = bsrs_long, pc = i))
}

```

### Factor score (loadings) plots

```{r, fig.width=8, fig.height=6}
fj_long <- 
  exp_res$pca_res$Fixed.Data$ExPosition.Data$fj %>%
  as_tibble(rownames = "meas") %>%
  pivot_longer(cols = -meas) %>%
  mutate(name = gsub("V", "PC", name)) %>%
  left_join(., bsrs_long %>% select(meas, name, sig), by = c("meas", "name"))

# this is how I determined hard-coded min and max (axs_rng)
#min(apply(exp_res$pca_res$Fixed.Data$ExPosition.Data$fj, 2, min))
#max(apply(exp_res$pca_res$Fixed.Data$ExPosition.Data$fj, 2, max))

plot_fjs <- function(data, pcs = c(1,2), axs_rng = c(-12, 12)
    ){
  # plot elements
  meas_df <- 
  tribble(
    ~"meas", ~"cat",
    "vis_mean", "Visual",
    "vis_slope", "Visual",
    "aud_mean", "Auditory",
    "aud_slope", "Auditory",
    "knee_PPT", "PPT",
    "shoulder_PPT", "PPT",
    "knee_CPM", "CPM",
    "shoulder_CPM", "CPM",
    "bt3a_baselinepain", "Bladder",
    "bt7a_green_pain", "Bladder",
    "bt7b_yellowpain", "Bladder",
    "bt7c_redpain", "Bladder",
    "bt3_baselineurgency", "Bladder",
    "bt7a_greenurg", "Bladder",
    "bt7b_yellowurg", "Bladder",
    "bt7c_redurg", "Bladder",
    "cold_pain_10s", "Cold Pain",
    "cold_pain_20s", "Cold Pain",
    "afterpain_knee_1", "After-Pain",
    "afterpain_shoulder_1", "After-Pain",
    "afterpain_knee_2", "After-Pain",
    "afterpain_shoulder_2", "After-Pain",
    "afterpain_knee_3", "After-Pain",
    "afterpain_shoulder_3", "After-Pain",
    "afterpain_hand", "After-Pain",
    "cssi", "Survey",
    "bodymap", "Survey",
    "gss", "Survey",
    "hsc_mean", "Survey"
    )
  ppal <- brewer.pal(12, "Paired")
  meas_cols <- 
  c(
    "Visual" = ppal[1], "Auditory" = ppal[2], "PPT" = ppal[3], "CPM" = ppal[4],
    "Bladder" = ppal[5], "Cold Pain" = ppal[6], "After-Pain" = ppal[7], 
    "Survey" = ppal[8]
    )
  # preps data
  fj_long_plot <- 
    data %>% 
    filter(name %in% paste0("PC", pcs)) %>%
    pivot_wider(
      id_cols = meas, names_from = name, values_from = c(value, sig)
      ) %>%
    left_join(., meas_df, by = "meas")
  # plot
  p <-
    ggplot(
      fj_long_plot, 
      aes(
        !!sym(paste0("value_PC", pcs[1])), !!sym(paste0("value_PC", pcs[2])), 
        color = cat
        )
      ) +
    geom_vline(xintercept = 0, linetype = 3) +
    geom_hline(yintercept = 0, linetype = 3) +
    geom_point() +
    theme_minimal() +
    geom_text_repel(aes(label = meas), show.legend = FALSE) +
    coord_cartesian(xlim = axs_rng, ylim = axs_rng) +
    scale_color_manual(values = meas_cols) + 
    labs(x = paste0("PC", pcs[1]), y = paste0("PC", pcs[2])) +
    theme(
      axis.line = element_blank(),
      panel.grid.major = element_blank(),
      panel.grid.minor = element_blank()
    )
  return(p)
} 

# plots factor score maps for document
plot_fjs(data = fj_long, pcs = c(1, 2))
plot_fjs(data = fj_long, pcs = c(2, 3))
plot_fjs(data = fj_long, pcs = c(1, 3))

```


### Supplementary projections

```{r, fig.width=8, fig.height=6}
# preps supplementary projection data
supp_proj <- 
  exp_res$supp_proj$fjj %>% 
  as_tibble(rownames = "meas") %>%
  pivot_longer(cols = -meas) %>%
  mutate(name = gsub("V", "PC", name))

# adds supp data to trained data
fj_long_supp <- bind_rows(fj_long, supp_proj)

# plots data
plot_fjs(data = fj_long_supp, pcs = c(1, 2))
plot_fjs(data = fj_long_supp, pcs = c(2, 3))
plot_fjs(data = fj_long_supp, pcs = c(1, 3))
```

### Associations between PCs and questionnaires

```{r ,fig.width=8}
library(correlation)

# preps q data
q_data <- 
  pca_data %>% 
  filter(redcap_event_name == "baseline_visit_chi_arm_1") %>%
  select(subject_id, cssi, bodymap, gss, hsc_mean) %>%
  mutate(subject_id = as.character(subject_id))

# preps subject-wise factor scores and adds q data
fis <- 
  exp_res$pca_res$Fixed.Data$ExPosition.Data$fi %>%
  as.data.frame() %>% # weird glitch when using as_tibble straight from matrix array
  as_tibble(rownames = "subject_id") %>%
  mutate(subject_id = gsub("X", "", subject_id)) %>%
  left_join(., q_data, by = "subject_id")
colnames(fis) <- sub("^V", "PC", colnames(fis)) 

# computes correlations
cor_res <- 
  fis %>%
  correlation(
    select = paste0("PC", 1:3), 
    select2 = c("cssi", "bodymap", "gss", "hsc_mean"),
    p_adjust = "fdr"
    )

# converts to tibble and creates column for sig coloring
cor_res_tib <- as_tibble(cor_res) %>% mutate(sig_fdr = p<.05)

# plot
tcol2 <- c("TRUE" = rdgy[3], "FALSE" = rdgy[8])
ggplot(cor_res_tib, aes(r, Parameter2, color = sig_fdr)) +
  geom_vline(xintercept = 0, linetype = 2) +
  geom_point() +
  geom_errorbarh(aes(xmin = CI_low, xmax = CI_high), height = .1) +
  theme_bw() +
  coord_cartesian(xlim= c(-1, 1)) +
  scale_color_manual(values = tcol2) +
  facet_wrap(~Parameter1)
```


## All Measures PCA

### Scree plot

```{r}
# scree data
scree_data <- 
  tibble(
    eigs = q_res$Fixed.Data$ExPosition.Data$eigs, 
    perc = q_res$Fixed.Data$ExPosition.Data$t,
    p = q_res$Inference.Data$components$p.vals
    ) %>%
  mutate(comp = factor(1:nrow(.)), sig = p<.05)

# scree plot
tcol <- c("TRUE" = rdgy[3], "FALSE" = rdgy[9])
ggplot(scree_data, aes(comp, perc)) +
  geom_path(aes(group = 1), alpha = 1/3) +
  geom_point(aes(color = sig), size = 2) +
  labs(
    x = "Component", 
    y = "Percentage of Variance Explained", 
    title = "Scree Plot"
    ) +
  scale_y_continuous(breaks = seq(1, 16, 2), labels = function(x) paste0(x, "%")) +
  scale_color_manual(values = tcol) +
  coord_cartesian(ylim = c(1, 16)) +
  theme_classic()
```

### Bootstrap ratios

```{r, fig.height=5}
# critical value used to test bootstrap significance
crit_val <- q_res$Inference.Data$fj.boots$tests$critical.value

# extracts bootstrap ratios
bsrs <- 
  q_res$Inference.Data$fj.boots$tests$boot.ratios %>%
  as_tibble(rownames = "meas")

# to long format for plotting
bsrs_long <- 
  bsrs %>% 
  pivot_longer(cols = -meas) %>%
  mutate(sig = abs(value) > crit_val, name = gsub("V", "PC", name)) 

# plots first 6 components
for (i in 1:6) {
  print(plot_bsrs(data = bsrs_long, pc = i))
}
```

### Factor score (loadings) plots

```{r, fig.width=8, fig.height=6}
fj_long <- 
  q_res$Fixed.Data$ExPosition.Data$fj %>%
  as_tibble(rownames = "meas") %>%
  pivot_longer(cols = -meas) %>%
  mutate(name = gsub("V", "PC", name)) %>%
  left_join(., bsrs_long %>% select(meas, name, sig), by = c("meas", "name"))

# this is how I determined hard-coded min and max (axs_rng)
# min(apply(q_res$Fixed.Data$ExPosition.Data$fj, 2, min))
# max(apply(q_res$Fixed.Data$ExPosition.Data$fj, 2, max))

# plots factor score maps for document
plot_fjs(data = fj_long, pcs = c(1, 2))
plot_fjs(data = fj_long, pcs = c(2, 3))
plot_fjs(data = fj_long, pcs = c(1, 3))
```


